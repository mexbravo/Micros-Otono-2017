/* ###################################################################
**     Filename    : main.c
**     Project     : i2c_c
**     Processor   : MC9S08SH8CPJ
**     Version     : Driver 01.12
**     Compiler    : CodeWarrior HCS08 C Compiler
**     Date/Time   : 2017-11-29, 15:33, # CodeGen: 0
**     Abstract    :
**         Main module.
**         This module contains user's application code.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file main.c
** @version 01.12
** @brief
**         Main module.
**         This module contains user's application code.
*/         
/*!
**  @addtogroup main_module main module documentation
**  @{
*/         
/* MODULE main */


/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "CI2C1.h"
/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

/* User includes (#include below this line is not maintained by Processor Expert) */

const unsigned char logo [] = {0x40,
		0x00, 0x20, 0x50, 0x70, 0x00, 0x7C, 0x50, 0x20, 0x00, 0x20, 0x50, 0x50, 0x00, 0x20, 0x50, 0x7C,
		0x00, 0x60, 0x50, 0x20, 0x00, 0x78, 0x14, 0x00, 0x20, 0x50, 0xF0, 0x00, 0x7C, 0x10, 0x60, 0x00,
		0x74, 0x00, 0xF4, 0x00, 0x7C, 0x20, 0x50, 0x00, 0x7C, 0x00, 0x70, 0x10, 0x70, 0x10, 0x60, 0x00,
		0x70, 0x10, 0x60, 0x00, 0x70, 0x50, 0x70, 0x00, 0xF0, 0x50, 0x20, 0x00, 0x20, 0x50, 0xF0, 0x00,
		0x70, 0x10, 0x40, 0x70, 0x10, 0x00, 0x38, 0x50, 0x00, 0x30, 0x40, 0x70, 0x00, 0x30, 0x40, 0x30,
		0x00, 0x70, 0x40, 0x40, 0x70, 0x00, 0x50, 0x20, 0x50, 0x00, 0x90, 0x60, 0x10, 0x00, 0x50, 0x70,
		0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x70, 0x2C, 0x2C, 0x70, 0x00, 0x7C, 0x54, 0x54, 0x28, 0x00, 0x38, 0x44, 0x44, 0x28, 0x00,
		0x7C, 0x44, 0x44, 0x38, 0x00, 0x7C, 0x54, 0x44, 0x00, 0x7C, 0x14, 0x04, 0x00, 0x38, 0x44, 0x54,
		0x74, 0x00, 0x7C, 0x10, 0x10, 0x7C, 0x00, 0x7C, 0x00, 0x60, 0x40, 0x3C, 0x00, 0x7C, 0x10, 0x28,
		0x44, 0x00, 0x7C, 0x40, 0x40, 0x00, 0x7C, 0x08, 0x10, 0x08, 0x7C, 0x00, 0x7C, 0x08, 0x10, 0x7C,
		0x00, 0x38, 0x44, 0x44, 0x38, 0x00, 0x7C, 0x14, 0x14, 0x08, 0x00, 0x38, 0x44, 0x24, 0x58, 0x00,
		0x7C, 0x14, 0x14, 0x68, 0x00, 0x04, 0x7C, 0x04, 0x00, 0x48, 0x54, 0x54, 0x24, 0x00, 0x3C, 0x40,
		0x40, 0x3C, 0x00, 0x1C, 0x60, 0x1C, 0x00, 0x1C, 0x60, 0x18, 0x60, 0x1C, 0x00, 0x6C, 0x10, 0x6C,
		0x00, 0x0C, 0x70, 0x0C, 0x00, 0x64, 0x54, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void Sendlogo(void)
{
		word Snt;
		CI2C1_SendBlock(&logo,sizeof(logo),&Snt);
		Cpu_Delay100US(3);
}

void SendChar(unsigned char com)
{
		byte data[10];
		word Snt;
		data[0]=0x40;
		data[1]=com;
		CI2C1_SendBlock(&data[0],2,&Snt);
		Cpu_Delay100US(3);
}

void sendcommand(unsigned char com)
{
	byte data[10];
	word Snt;
	data[0]=0x80;
	data[1]=com;
	   	//Wire.beginTransmission(OLED_address); //begin transmitting
	//CI2C1_SendChar(data[0]);
	CI2C1_SendBlock(&data[0],2,&Snt);
	Cpu_Delay100US(3);
}

//==========================================================//
// Turns display on.
void displayOn(void)
{
 sendcommand(0xaf); //display on
}

//==========================================================//
// Turns display off.
void displayOff(void)
{
 sendcommand(0xae); //display off
}


void SetXY(byte row,byte col){
	sendcommand(0xb0+row);
	sendcommand(0x00+(8*col&0x0f));
	sendcommand(0x10+((8*col>>4)&0x0f));
}



void clear_display(void)
{
 unsigned char i,k;
 for(k=0;k<8;k++)
 	 	 {
	 	 	 SetXY(k,0);
	 	 	 	
	 	 		 	 for(i=0;i<128;i++) //clear all COL
	 	 		 	 	 {
	 	 		 		 	 SendChar(0); //clear all COL
	 	 		 		 	 	 //delay(10);
	 	 		 	 	 }
	 	 	 	
 	 	 }
}



void init_OLED(void)
{
 sendcommand(0xae); //display off
 sendcommand(0xa6); //Set Normal Display (default)
 // Adafruit Init sequence for 128x64 OLED module
 sendcommand(0xAE); //DISPLAYOFF
 sendcommand(0xD5); //SETDISPLAYCLOCKDIV
 sendcommand(0x80); // the suggested ratio 0x80
 sendcommand(0xA8); //SSD1306_SETMULTIPLEX
 sendcommand(0x3F);
 sendcommand(0xD3); //SETDISPLAYOFFSET
 sendcommand(0x0); //no offset
 sendcommand(0x40 | 0x0); //SETSTARTLINE
 sendcommand(0x8D); //CHARGEPUMP
 sendcommand(0x14);
 sendcommand(0x20); //MEMORYMODE
 sendcommand(0x00); //0x0 act like ks0108

 sendcommand(0xA0 | 0x1); //SEGREMAP //Rotate screen 180 deg
 //sendcommand(0xA0);

 sendcommand(0xC8); //COMSCANDEC Rotate screen 180 Deg
 //sendcommand(0xC0);

 sendcommand(0xDA); //0xDA
 sendcommand(0x22); //COMSCANDEC
 sendcommand(0x81); //SETCONTRAS
 sendcommand(0xCF); //
 sendcommand(0xD9); //SETPRECHARGE
 sendcommand(0xF1);
 sendcommand(0xDB); //SETVCOMDETECT
 sendcommand(0x40);
 sendcommand(0xA4); //DISPLAYALLON_RESUME
 sendcommand(0xA6); //NORMALDISPLAY 

 clear_display();
 sendcommand(0x2e); // stop scroll
 
 sendcommand(0x20); //Set Memory Addressing Mode
 sendcommand(0x00); //Set Memory Addressing Mode ab Horizontal addressing mode
  SetXY(0,0);
 sendcommand(0xaf); //display on

}
void main(void)
{
  /* Write your local variable definition here */
	unsigned char i,k;
  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
  /*** End of Processor Expert internal initialization.                    ***/
  	 
  CI2C1_SelectSlave(0x3C);
  init_OLED();
  clear_display();
  i=0;
  SetXY(0,0);
  Sendlogo();
  
    
  /* Write your code here */
  /* For example: for(;;) { } */
  for(;;) {
	  
	  
  }
  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END main */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale HCS08 series of microcontrollers.
**
** ###################################################################
*/
